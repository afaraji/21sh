

/*

*****************************************************************
**********                shell grammar                 *********
*****************************************************************

<letter> ::= a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|
	     A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z

<digit> ::= 0|1|2|3|4|5|6|7|8|9

<number> ::= <digit> | <number> <digit>

<word> ::= <letter> | <word> <letter> | <word> '_'

<word_list> ::= <word> |  <word_list> <word>

<assignment_word> ::= <word> '=' <word>

<redirection> ::=  '>' <word> |  '<' <word> |  <number> '>' <word>
		|  <number> '<' <word> |  '>>' <word>
		|  <number> '>>' <word> |  '<<' <word>
		|  <number> '<<' <word> |  '<&' <number>
		|  <number> '<&' <number> |  '>&' <number>
		|  <number> '>&' <number> |  '<&' <word>
		|  <number> '<&' <word> |  '>&' <word>
		|  <number> '>&' <word> |  '<<-' <word>
		| <number> '<<-' <word> |  '>&' '-'
		|  <number> '>&' '-' |  '<&' '-'
		|  <number> '<&' '-' |  '&>' <word>
		|  <number> '<>' <word> |  '<>' <word>
		|  '>|' <word> |  <number> '>|' <word>

<simple_command_element> ::= <word> | <assignment_word>
			<redirection>

<redirection_list> ::= <redirection> | <redirection_list> <redirection>

<simple_command> ::=  <simple_command_element> | <simple_command> <simple_command_element>

<command> ::=  <simple_command> | <shell_command> | <shell_command> <redirection_list>

<shell_command> ::=  <for_command> | <case_command>
		  | while <compound_list> do <compound_list> done
		  | until <compound_list> do <compound_list> done
		  | <select_command> | <if_command> | <subshell>
		  | <group_command> | <function_def>

<for_command> ::=  for <word> <newline_list> do <compound_list> done
	    |  for <word> <newline_list> '{' <compound_list> '}'
	    |  for <word> ';' <newline_list> do <compound_list> done
	    |  for <word> ';' <newline_list> '{' <compound_list> '}'
	    |  for <word> <newline_list> in <word_list> <list_terminator>
		   <newline_list> do <compound_list> done
	    |  for <word> <newline_list> in <word_list> <list_terminator>
		   <newline_list> '{' <compound_list> '}'

<select_command> ::=  select <word> <newline_list> do <list> done
		   |  select <word> <newline_list> '{' <list> '}'
		   |  select <word> ';' <newline_list> do <list> done
		   |  select <word> ';' <newline_list> '{' list '}'
		   |  select <word> <newline_list> in <word_list>
			   <list_terminator> <newline_list> do <list> done
		   |  select <word> <newline_list> in <word_list>
			   <list_terminator> <newline_list> '{' <list> '}'

<case_command> ::=  case <word> <newline_list> in <newline_list> esac
		 |  case <word> <newline_list> in <case_clause_sequence>
			 <newline_list> esac
		 |  case <word> <newline_list> in <case_clause> esac

<function_def> ::=  <word> '(' ')' <newline_list> <group_command>
		 |  function <word> '(' ')' <newline_list> <group_command>
		 |  function <word> <newline_list> <group_command>

<subshell> ::=  '(' <compound_list> ')'

<if_command> ::= if <compound_list> then <compound_list> fi
	  | if <compound_list> then <compound_list> else <compound_list> fi
	  | if <compound_list> then <compound_list> <elif_clause> fi

<group_command> ::=  '{' <list> '}'

<elif_clause> ::= elif <compound_list> then <compound_list>
	   | elif <compound_list> then <compound_list> else <compound_list>
	   | elif <compound_list> then <compound_list> <elif_clause>

<case_clause> ::=  <pattern_list>
		|  <case_clause_sequence> <pattern_list>

<pattern_list> ::=  <newline_list> <pattern> ')' <compound_list>
		 |  <newline_list> <pattern> ')' <newline_list>
		 |  <newline_list> '(' <pattern> ')' <compound_list>
		 |  <newline_list> '(' <pattern> ')' <newline_list>

<case_clause_sequence> ::=  <pattern_list> ';;'
			 |  <case_clause_sequence> <pattern_list> ';;'

<pattern> ::=  <word> | <pattern> '|' <word>


<list> ::=   <newline_list> <list0>

<compound_list> ::=  <list>
		  |  <newline_list> <list1>

<list0> ::=   <list1> '\n' <newline_list>
	   |  <list1> '&' <newline_list>
	   |  <list1> ';' <newline_list>

<list1> ::=   <list1> '&&' <newline_list> <list1>
	   |  <list1> '||' <newline_list> <list1>
	   |  <list1> '&' <newline_list> <list1>
	   |  <list1> ';' <newline_list> <list1>
	   |  <list1> '\n' <newline_list> <list1>
	   |  <pipeline_command>

<list_terminator> ::= '\n'
		   |  ';'

<newline_list> ::=
		  |  <newline_list> '\n'

<simple_list> ::=  <simple_list1>
		|  <simple_list1> '&'
		|  <simple_list1> ';'

<simple_list1> ::=  <simple_list1> '&&' <newline_list> <simple_list1>
		 |  <simple_list1> '||' <newline_list> <simple_list1>
		 |  <simple_list1> '&' <simple_list1>
		 |  <simple_list1> ';' <simple_list1>
		 |  <pipeline_command>

<pipeline_command> ::= <pipeline>
		    |  '!' <pipeline>
		    |  <timespec> <pipeline>
		    |  <timespec> '!' <pipeline>
		    |  '!' <timespec> <pipeline>

<pipeline> ::=
	  <pipeline> '|' <newline_list> <pipeline>
       |  <command>

<time_opt> ::= '-p'

<timespec> ::=  time
	     |  time <time_opt>

.XE "BNF (Backus-Naur Form)"
.XE "bash" "syntax, BNF form of"
// src: https://my.safaribooksonline.com/book/operating-systems-and-server-administration/unix/1565923472/syntax/lbs.appd.div.3

*/

/*

*****************************************************************
**********                shell grammar                 *********
*****************************************************************

<number> ::= <digit> | <number> <digit>

<word> ::= <letter> | <word> <letter> | <word> '_'

<word_list> ::= <word> |  <word_list> <word>

<assignment_word> ::= <word> '=' <word>

<redirection> ::=  '>' <word> |  '<' <word> |  <number> '>' <word>
		|  <number> '<' <word> |  '>>' <word>
		|  <number> '>>' <word> |  '<<' <word>
		|  <number> '<<' <word> |  '<&' <number>
		|  <number> '<&' <number> |  '>&' <number>
		|  <number> '>&' <number> |  '<&' <word>
		|  <number> '<&' <word> |  '>&' <word>
		|  <number> '>&' <word> |  '<<-' <word>
		| <number> '<<-' <word> |  '>&' '-'
		|  <number> '>&' '-' |  '<&' '-'
		|  <number> '<&' '-' |  '&>' <word>
		|  <number> '<>' <word> |  '<>' <word>
		|  '>|' <word> |  <number> '>|' <word>

<simple_command_element> ::= <word> | <assignment_word> | <redirection>

<redirection_list> ::= <redirection> | <redirection_list> <redirection>

<simple_command> ::=  <simple_command_element> | <simple_command> <simple_command_element>

<command> ::=  <simple_command> | <shell_command> | <shell_command> <redirection_list>

<list> ::=   <newline_list> <list0>

<list0> ::=   <list1> '\n' <newline_list>
	   |  <list1> '&' <newline_list>
	   |  <list1> ';' <newline_list>

<list1> ::=   <list1> '&&' <newline_list> <list1>
	   |  <list1> '||' <newline_list> <list1>
	   |  <list1> '&' <newline_list> <list1>
	   |  <list1> ';' <newline_list> <list1>
	   |  <list1> '\n' <newline_list> <list1>
	   |  <pipeline_command>

<list_terminator> ::= '\n'  |  ';'

<newline_list> ::=  |  <newline_list> '\n'

<simple_list> ::=  <simple_list1>
		|  <simple_list1> '&'
		|  <simple_list1> ';'

<simple_list1> ::=  <simple_list1> '&&' <newline_list> <simple_list1>
		 |  <simple_list1> '||' <newline_list> <simple_list1>
		 |  <simple_list1> '&' <simple_list1>
		 |  <simple_list1> ';' <simple_list1>
		 |  <pipeline_command>

<pipeline_command> ::= <pipeline>
		    		|  '!' <pipeline>
				    |  <timespec> <pipeline>
				    |  <timespec> '!' <pipeline>
				    |  '!' <timespec> <pipeline>

<pipeline> ::= <pipeline> '|' <newline_list> <pipeline> |  <command>


.XE "BNF (Backus-Naur Form)"
.XE "bash" "syntax, BNF form of"
// src: https://my.safaribooksonline.com/book/operating-systems-and-server-administration/unix/1565923472/syntax/lbs.appd.div.3

*/

// https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/
// https://www.geeksforgeeks.org/recursive-descent-parser/
// https://theswissbay.ch/pdf/Gentoomen%20Library/Programming/Bash/O%27Reilly%20bash%20CookBook.pdf
// http://man7.org/linux/man-pages/man1/bash.1.html
// http://hyperpolyglot.org/unix-shells



<redirection> ::=  '>' <word> |  '<' <word> |  <number> '>' <word>	|  <number> '<' <word>
				| '>>' <word>	|  <number> '>>' <word> |  '<<' <word> |  <number> '<<' <word>
				| '<&' <number> | <number> '<&' <number> | '>&' <number> | <number> '>&' <number> | '<&' <word> | <number> '<&' <word> | '>&' <word> | <number> '>&' <word> | '&>' <word>
				| '<<-' <word> | <number> '<<-' <word>
				| '>&' '-' |  <number> '>&' '-' |  '<&' '-' | <number> '<&' '-'
				| <number> '<>' <word> | '<>' <word>	| '>|' <word> | <number> '>|' <word>



/* -------------------------------------------------------
   The grammar symbols
   ------------------------------------------------------- */

%token  WORD
%token  ASSIGNMENT_WORD
%token  NAME
%token  NEWLINE
%token  IO_NUMBER

/* The following are the operators mentioned above. */

%token  AND_IF    OR_IF    DSEMI
/*      '&&'      '||'     ';;'    */

%token  DLESS  DGREAT  LESSAND  GREATAND  LESSGREAT  DLESSDASH
/*      '<<'   '>>'    '<&'     '>&'      '<>'       '<<-'   */

%token  CLOBBER
/*      '>|'   */

/* The following are the reserved words. */

%token  If    Then    Else    Elif    Fi    Do    Done
/*      'if'  'then'  'else'  'elif'  'fi'  'do'  'done'   */

%token  Case    Esac    While    Until    For
/*      'case'  'esac'  'while'  'until'  'for'   */

/* These are reserved words, not operator tokens, and are
   recognized when reserved words are recognized. */

%token  Lbrace    Rbrace    Bang
/*      '{'       '}'       '!'   */

%token  In
/*      'in'   */


/* -------------------------------------------------------
   The Grammar
   ------------------------------------------------------- */

%start  complete_command
%%
complete_command : list separator
                 | list
                 ;
list             : list separator_op and_or
                 |                   and_or
                 ;
and_or           :                         pipeline
                 | and_or AND_IF linebreak pipeline
                 | and_or OR_IF  linebreak pipeline
                 ;
pipeline         :      pipe_sequence
                 | Bang pipe_sequence
                 ;
pipe_sequence    : command | pipe_sequence '|' linebreak command
                 ;
command          : simple_command
                 | compound_command
                 | compound_command redirect_list
                 | function_definition
                 ;
compound_command : brace_group
                 | subshell
                 | for_clause
                 | case_clause
                 | if_clause
                 | while_clause
                 | until_clause
                 ;
subshell         : '(' compound_list ')'
                 ;
compound_list    :              term
                 | newline_list term
                 |              term separator
                 | newline_list term separator
                 ;
term             : term separator and_or
                 |                and_or
                 ;
for_clause       : For name linebreak                            do_group
                 | For name linebreak in          sequential_sep do_group
                 | For name linebreak in wordlist sequential_sep do_group
                 ;
name             : NAME                     /* Apply rule 5 */
                 ;
in               : In                       /* Apply rule 6 */
                 ;
wordlist         : wordlist WORD
                 |          WORD
                 ;
case_clause      : Case WORD linebreak in linebreak case_list    Esac
                 | Case WORD linebreak in linebreak case_list_ns Esac
                 | Case WORD linebreak in linebreak              Esac
                 ;
case_list_ns     : case_list case_item_ns
                 |           case_item_ns
                 ;
case_list        : case_list case_item
                 |           case_item
                 ;
case_item_ns     :     pattern ')'               linebreak
                 |     pattern ')' compound_list linebreak
                 | '(' pattern ')'               linebreak
                 | '(' pattern ')' compound_list linebreak
                 ;
case_item        :     pattern ')' linebreak     DSEMI linebreak
                 |     pattern ')' compound_list DSEMI linebreak
                 | '(' pattern ')' linebreak     DSEMI linebreak
                 | '(' pattern ')' compound_list DSEMI linebreak
                 ;
pattern          :             WORD         /* Apply rule 4 */
                 | pattern '|' WORD         /* Do not apply rule 4 */
                 ;
if_clause        : If compound_list Then compound_list else_part Fi
                 | If compound_list Then compound_list           Fi
                 ;
else_part        : Elif compound_list Then else_part
                 | Else compound_list
                 ;
while_clause     : While compound_list do_group
                 ;
until_clause     : Until compound_list do_group
                 ;
function_definition : fname '(' ')' linebreak function_body
                 ;
function_body    : compound_command                /* Apply rule 9 */
                 | compound_command redirect_list  /* Apply rule 9 */
                 ;
fname            : NAME                            /* Apply rule 8 */
                 ;
brace_group      : Lbrace compound_list Rbrace
                 ;
do_group         : Do compound_list Done           /* Apply rule 6 */
                 ;
simple_command   : cmd_prefix cmd_word cmd_suffix
                 | cmd_prefix cmd_word
                 | cmd_prefix
                 | cmd_name cmd_suffix
                 | cmd_name
                 ;
cmd_name         : WORD                   /* Apply rule 7a */
                 ;
cmd_word         : WORD                   /* Apply rule 7b */
                 ;
cmd_prefix       :            io_redirect
                 | cmd_prefix io_redirect
                 |            ASSIGNMENT_WORD
                 | cmd_prefix ASSIGNMENT_WORD
                 ;
cmd_suffix       :            io_redirect
                 | cmd_suffix io_redirect
                 |            WORD
                 | cmd_suffix WORD
                 ;
redirect_list    :               io_redirect
                 | redirect_list io_redirect
                 ;
io_redirect      :           io_file
                 | IO_NUMBER io_file
                 |           io_here
                 | IO_NUMBER io_here
                 ;
io_file          : '<'       filename
                 | LESSAND   filename
                 | '>'       filename
                 | GREATAND  filename
                 | DGREAT    filename
                 | LESSGREAT filename
                 | CLOBBER   filename
                 ;
filename         : WORD                      /* Apply rule 2 */
                 ;
io_here          : DLESS     here_end
                 | DLESSDASH here_end
                 ;
here_end         : WORD                      /* Apply rule 3 */
                 ;
newline_list     :              NEWLINE
                 | newline_list NEWLINE
                 ;
linebreak        : newline_list
                 | /* empty */
                 ;
separator_op     : '&'
                 | ';'
                 ;
separator        : separator_op linebreak
                 | newline_list
                 ;
sequential_sep   : ';' linebreak
                 | newline_list
                 ;
/* -------------------------------------------------------
   End of grammar
   ------------------------------------------------------- */


/*******************************
*******		tests	************
********************************

void    test_parse()
{
    const char *tests[] = {
        "1 >file something 2>&1",
		"ls -la | cat -e | grep sh",
        "echo 1 ; (2 && (ls -la; echo amine)) || (3 && (ls && (echo karim || echo ahmed)))",
        "(ls -la; echo karim) > file ",
        "ls -la | {cat -e; ls -la} >file",
        "(ls -la; echo karim) | cat -e",
        "{ls -la | ls -la } > file",
        "echo $name",
        "echo $(ls -la && echo $(ls -la ')' \")\"))karim ls -la",
        "echo ${name}",
        "echo $(ls -la)",
		"ls -la && echo karim | cat -e",
		"echo $$",
		"echo karim& echo ahmed&"
    };
    for (const char **it = tests; it != tests + sizeof(tests)/sizeof(*tests); it++) {
        init_stream(*it);
        t_node *node = parse_commands();
        print_parse(node);
        printf("\n\n===========================================\n\n");
    }
    // if (g_token.kind != TOKEN_EOF)
    //     syntax_error("Syntax error near %c\n", g_token.kind);
}
**************************************/
more tests https://github.com/cbcercas/21sh-42sh/edit/master/tests/tests_bats/create.txt
open fd in shel https://bash.cyberciti.biz/guide/Opening_the_file_descriptors_for_reading_and_writing
how bash handl heredoc https://www.oilshell.org/blog/2016/10/18.html
***************************************

top/htop
ls -la /proc/pid/fd
ls /dev/fd
lsof -c processname
lsof -p PID
exec [n]<> /tmp/file ==> open file on fd=[n]
dtruss? strace ??

/*
**https://github.com/xopxop/21sh/blob/master/src/executor/redirects_great.c
*/

/*
**https://pubs.opengroup.org/onlinepubs/009695399/utilities/
**xcu_chap02.html#tag_02_03
**https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form
**https://www.gnu.org/software/bash/manual/bash.html#Shell-Operation
**https://www.cs.purdue.edu/homes/grr/SystemsProgrammingBook/
**Book/Chapter5-WritingYourOwnShell.pdf
**https://git.kernel.org/pub/scm/utils/dash/dash.git/tree/src
**https://catonmat.net/ftp/bash-redirections-cheat-sheet.pdf
*/


//extern int		g_var;

add_redirect.c         !!!!
io_redirect_aggr.c     !!!!
token_translate.c

last_in_hist need testing
ls && echo lol & cat -e < /tmp/testout lunches ls alone and echo alone as separated proces
